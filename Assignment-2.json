{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Marks in English ? 65\n",
      "Marks in Math ? 66\n",
      "Marks in Physics ? 64\n",
      "Marks in Chemistry ? 32\n",
      "Marks in Urdu? 25\n",
      "\t\t\tRESULT OF CLASS X\n",
      "\n",
      "\n",
      "\t\t\tEnglish\t\t:\t 65\n",
      "\t\t\tMath\t\t:\t 66\n",
      "\t\t\tPhysics\t\t:\t 64\n",
      "\t\t\tChemistry\t:\t 32\n",
      "\t\t\tUrdu\t\t:\t 25\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\t\t\tTotal\t\t:\t 252\n",
      "\n",
      "\n",
      "\t\t\t%age\t\t:\t 50.4 %\n",
      "\t\t\tGrade\t\t:\t C\n"
     ]
    }
   ],
   "source": [
    "#Generating Marks Sheet\n",
    "\n",
    "#Total marks of all papers\n",
    "totalMarks = 500\n",
    "\n",
    "#Getting inputs\n",
    "english = int(input('Marks in English ? '))\n",
    "    \n",
    "math = int(input('Marks in Math ? '))\n",
    "\n",
    "physics = int(input('Marks in Physics ? '))\n",
    "\n",
    "chemistry = int(input('Marks in Chemistry ? '))\n",
    "\n",
    "urdu = int(input('Marks in Urdu? '))\n",
    "\n",
    "#Total and percentage calculator\n",
    "obtainedMarks = english+math+physics+chemistry+urdu\n",
    "percentage = (obtainedMarks / totalMarks)*100\n",
    "\n",
    "#Printing Marks sheet\n",
    "\n",
    "print(\"\\t\\t\\tRESULT OF CLASS X\")\n",
    "print(\"\\n\\n\\t\\t\\tEnglish\\t\\t:\\t\", english)\n",
    "print(\"\\t\\t\\tMath\\t\\t:\\t\", math)\n",
    "print(\"\\t\\t\\tPhysics\\t\\t:\\t\", physics)\n",
    "print(\"\\t\\t\\tChemistry\\t:\\t\", chemistry)\n",
    "print(\"\\t\\t\\tUrdu\\t\\t:\\t\", urdu)\n",
    "print(\"\\n\")\n",
    "print(\"\\n\\n\\t\\t\\tTotal\\t\\t:\\t\", obtainedMarks)\n",
    "print(\"\\n\\n\\t\\t\\t%age\\t\\t:\\t\", percentage, '%')\n",
    "\n",
    "#Calculation of grades\n",
    "\n",
    "if percentage>=40 and percentage < 50:\n",
    "    print(\"\\t\\t\\tGrade\\t\\t:\\t D\")\n",
    "elif percentage >=50 and percentage < 60:\n",
    "    print(\"\\t\\t\\tGrade\\t\\t:\\t C\")\n",
    "elif percentage >=60 and percentage < 70:\n",
    "    print(\"\\t\\t\\tGrade\\t\\t:\\t B\")\n",
    "elif percentage >=80 and percentage < 90:\n",
    "    print(\"\\t\\t\\tGrade\\t\\t:\\t B\")\n",
    "elif percentage >=90:\n",
    "    print(\"\\t\\t\\tGrade\\t\\t:\\t A\")\n",
    "else:\n",
    "    print(\"\\t\\t\\tGrade\\t\\t:\\t Failed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number to check or '0' to Exit 5\n",
      "Your given number is Odd\n",
      "Enter number to check or '0' to Exit 6\n",
      "Yes! this number is Even\n",
      "Enter number to check or '0' to Exit 7\n",
      "Your given number is Odd\n",
      "Enter number to check or '0' to Exit 0\n"
     ]
    }
   ],
   "source": [
    "#Even Odd\n",
    "numberToCheck = -1\n",
    "\n",
    "while numberToCheck!=0:\n",
    "    \n",
    "    numberToCheck = int(input('Enter number to check or \\'0\\' to Exit '))\n",
    "\n",
    "    if numberToCheck !=0:\n",
    "        if (numberToCheck % 2) == 0:\n",
    "            print(\"Yes! this number is Even\")\n",
    "        else:\n",
    "            print(\"Your given number is Odd\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter new value for list or '0' to Exit : 5\n",
      "Enter new value for list or '0' to Exit : 4\n",
      "Enter new value for list or '0' to Exit : 6\n",
      "Enter new value for list or '0' to Exit : 8\n",
      "Enter new value for list or '0' to Exit : 6\n",
      "Enter new value for list or '0' to Exit : 45\n",
      "Enter new value for list or '0' to Exit : 45\n",
      "Enter new value for list or '0' to Exit : 0\n",
      "['5', '4', '6', '8', '6', '45', '45']\n",
      "\n",
      "The Lenght of your list is  7\n"
     ]
    }
   ],
   "source": [
    "# Length of the List\n",
    "#Basic Variable Initialization\n",
    "\n",
    "myInput = ''\n",
    "myList = []\n",
    "\n",
    "# Generating list through user input\n",
    "\n",
    "while myInput !='0':\n",
    "    myInput = input('Enter new value for list or \\'0\\' to Exit : ')\n",
    "\n",
    "    if myInput!='0':\n",
    "        myList.append(myInput)\n",
    "        \n",
    "# Printing the length of a list\n",
    "\n",
    "print(myList)\n",
    "print('\\nThe Lenght of your list is ', len(myList))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integer Values in List are  [10, 20, 30]  =  60\n",
      "Numbers entered as text in List are  [50, 60, 70]  =  180\n",
      "The total sum of all values is  240\n"
     ]
    }
   ],
   "source": [
    "# Sum numbers in List\n",
    "# Variable and Lists initialization\n",
    "\n",
    "myNumLlist=[]\n",
    "myList=['Amjad','50',10,'Khalid','60',20,'Arshad','70',30]\n",
    "myNumListInt=[]\n",
    "myNumListStr=[]\n",
    "\n",
    "#loop for checking each value in the list\n",
    "\n",
    "for i in myList:\n",
    "    # Check the values which are entered as integers in list\n",
    "    if (isinstance(i, int)):\n",
    "        myNumListInt.append(i)\n",
    "\n",
    "    # Check numeric values which are entered as String in the list\n",
    "    try:\n",
    "        if i.isnumeric():\n",
    "            myNumListStr.append(int(i))\n",
    "    except AttributeError:\n",
    "            pass\n",
    "\n",
    "# Print pure integer values plus their sum\n",
    "print('Integer Values in List are ', myNumListInt, ' = ', sum(myNumListInt))\n",
    "\n",
    "# Print integer values converted from strings plus their sum\n",
    "print('Numbers entered as text in List are ', myNumListStr , ' = ', sum(myNumListStr))\n",
    "\n",
    "# Print the total\n",
    "print('The total sum of all values is ', sum(myNumListInt+myNumListStr))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List contains following numbers :\n",
      "[5, 7, 9, 13, 26, 5, 98, 132, 65, 82, 210, 65, 87, 19, 42, 38, 67, 1, 22]\n",
      "the Largest value in the list is :  210\n"
     ]
    }
   ],
   "source": [
    "# Finding largest number in list\n",
    "\n",
    "numberList = [5,7,9,13,26,5,98,132,65,82,210,65,87,19,42,38,67,1,22]\n",
    "\n",
    "print('List contains following numbers :')\n",
    "print(numberList)\n",
    "\n",
    "print('the Largest value in the list is : ', max(numberList))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Printng values i.e. less than 5 from the list\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "# Finding number less than 5\n",
    "\n",
    "print('Printng values i.e. less than 5 from the list')\n",
    "\n",
    "a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n",
    "\n",
    "\n",
    "for i in a:\n",
    "    if i < 5:\n",
    "        print(i)\n",
    "    else:\n",
    "        continue\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
